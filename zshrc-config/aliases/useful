#!/bin/bash

alias hs='history | grep'
alias zshrc='code $ZSH_CUSTOM_CONFIG_FILES'
alias hibernate="sudo systemctl hibernate"
alias ds_clean="find . -name '.DS_Store' -type f -delete"
alias wanip='dig +short myip.opendns.com @resolver1.opendns.com'
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'
alias localhosts='ifconfig | grep "inet " | grep -v 127.0.0.1'  # https://stackoverflow.com/a/4779992

# CP command, do rsync if file is a folder or higher than 50MB  // rsync -ah --progress
alias cp='rsync -ah --progress'

### Sublime
# alias sublsettingsf="subl '$(find $HOME -type d -name "*Sublime*Text*" 2>&1 | grep -v "find")/Packages/User/'*sublime*"
# alias sublsettings='subl '$(find $HOME -type d -name "*Sublime*Text*" 2>&1 | grep -v "find")/Packages/User/''

### Emacs
# alias emacs="/usr/local/bin/emacs"

### GIT
alias gamod="git ls-files --modified | xargs git add"
# Remove all your local git branches but keep master and the current branch:
alias greset='git branch | egrep -v "(master|\*)" | xargs git branch -D'

### Vagrant
alias vagrantclean="vagrant box list | cut -f 1 -d ' ' | xargs -L 1 vagrant box remove -f"

function pro_rebase(){
    # https://stackoverflow.com/a/927386
    regex='^[0-9]+$'
    if [[ $@ =~ $regex ]] ; then
        git rebase -i HEAD~"$@"
        echo "Remember to push with --force flag."
    else
        echo "How pro_rebase works:"
        echo "  Put as first param the number of commits you want to cover (1-N)."
        echo "  e.g: pro_rebase 3  == git rebase -i HEAD~3"
        echo "  Squash commits or whatever and then push your chages with --force"
    fi
}

function search() { find / -name "$@" | echo; }

alias awesome='cat $ZSH_CUSTOM_CONFIG_FILES/awesome.txt'
alias githooksconfig='git config --global core.hooksPath ~/.config/git/hooks/'

### GOLANG
# alias gotest='go test ./... -p 1 -v'
# TODO:
# https://stackoverflow.com/a/30033822/4349318
gotest(){ color : string }{
    color
    : string color

    if [[ "$color" != "color" ]]
        then
            go test ./... -p 1 -v \
            | sed ''/PASS/s//$(printf "\033[32mPASS\033[0m")/'' \
            | sed ''/FAIL/s//$(printf "\033[31mFAIL\033[0m")/'' # \
            #| GREP_COLOR="01;33" egrep --color=always '\s*[a-zA-Z0-9\-_.]+[:][0-9]+[:]|^'
    fi
    if [[ "$color" != "" ]]
        then
        go test ./... -p 1 -v
    fi
}
gocover () {
  local t=$(mktemp -t cover)
  go test $COVERFLAGS -coverprofile=$t $@ && go tool cover -func=$t && unlink $t
}
# for pkg in *; do go test "./$pkg"; done
# go clean -testcache # https://golang.org/pkg/cmd/go/internal/clean/

# CD ANYWHERE aliases
alias gow='cd ~/Work'
alias gopath='cd $(go env GOPATH)'
alias gosrc='cd $(go env GOPATH)/src/'


alias crypto\?='go run $ZSH_CUSTOM_CONFIG_FILES/crypto.go &'

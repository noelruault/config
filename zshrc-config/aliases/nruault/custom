#!/bin/bash

ASSETS_URL="$ZSH_CUSTOM_CONFIG_ALIASES/nruault/assets"

alias awesome="cat $ASSETS_URL/awesome.txt"
alias crypto\?="go run $ASSETS_URL/crypto.go"
alias noel.io\?="bash $ASSETS_URL/noeliodomain.sh"
{ 2>&3 (bash $ASSETS_URL/noeliodomain.sh "bash:request" &) } 3>&2 2>/dev/null

# alias noel.io\?='check_noelio_domain'
# function check_noelio_domain() {
#     # Checks for internet connectivity.
#     if nc -zw1 google.com 443 &>/dev/null; then echo; else exit 1; fi

#     domain_expiry_date=$(whois noel.io | grep "Registry Expiry Date" | grep -oE '(\d{4})-(\d\d)-(\d\d)' | sed 's/[\._-]//g')

#     current_epoch_time=$(date -jf %Y%m%d $(date +%Y%m%d) +%s)
#     domain_expity_date_epoch=$(date -jf %Y%m%d $domain_expiry_date +%s)

#     days_until_expiration=$(((domain_expity_date_epoch - current_epoch_time) / 86400))

#     if [[ "$1" == "bash:request" ]]; then
#         if ((days_until_expiration < 30)); then
#             echo "DOMAIN ABOUT TO EXPIRE, $days_until_expiration days left."
#         fi
#     else
#         echo "Domain expiration is $days_until_expiration days ahead."
#     fi
# }
# { 2>&3 (check_noelio_domain "bash:request" &) } 3>&2 2>/dev/null

# https://stackoverflow.com/a/7687722/4349318
# FIXME: I would expect this output to not overwrite whatever I started to type on the terminal.


function env_var_is_empty() {
    [ -z "$1" ]
}

alias goto=go_to_dir_on_specific_folder # A $COMPANY_DIRECTORY needs to be configured

# go_to_dir_on_specific_folder will try to find a directory that matches
# with the given parameters inside of an specific folder.
#
# NOTE: WORK_FOLDER variable could be changed to something else, more specific
# and without evaluations or commands.
#
# Used uncommon commands :
# - https://ss64.com/bash/wc.html
# - https://ss64.com/bash/awk.html
# - Colors: https://www.tldp.org/HOWTO/Bash-Prompt-HOWTO/x329.html https://www.shellhacks.com/bash-colors/
function go_to_dir_on_specific_folder() {
    if env_var_is_empty $COMPANY_DIRECTORY; then
        echo "Environment variable COMPANY_DIRECTORY is not defined"
        return
    fi

    echo $pwd                                                        # TODO(nruault): Remove-me
    WORK_FOLDER=$(eval echo $(go env GOPATH)/src/$COMPANY_DIRECTORY) # eval will store the desired payments path.

    # If there is no arguments, just go to $COMPANY_DIRECTORY
    if [[ $# -eq 0 ]]; then
        cd $WORK_FOLDER
        return
    fi

    counter=$(find $WORK_FOLDER -type d -name "*$1*$2*" -print -maxdepth 1 | wc -l) # wc is used for counting the lines
    if (($counter == 0)); then
        # An inverted counter will try to find matches inverting the order of the params.
        inverted_counter=$(find $WORK_FOLDER -type d -name "*$2*$1*" -print -maxdepth 1 | wc -l)
        if (($inverted_counter > 0)); then
            # If something matches, will display the results in addition to a tip.
            echo "Better try \e[0;33m$2 $1\e[0m"
            echo "Found:\n\e[0;34m$(find $WORK_FOLDER -type d -name "*$2*$1*" -print -maxdepth 1 | awk -F/ '{print $NF}')\e[0m"
            return
        fi

        echo "No matches."
        return

    elif (($counter > 1)); then
        # AWK is used in the next command to get the name of the folder without the path
        # The parenthesis at the begining will make this an array.
        search=($(find $WORK_FOLDER -type d -name "*$1*$2*" -print -maxdepth 1 | awk -F/ '{print $NF}'))

        # This loop will check if the input matches exactly with the name of the folder,
        # if there is an exact match, will cd and end the function.
        for i in "${search[@]}"; do
            if [ $i = $1 ]; then
                cd $WORK_FOLDER$1
                return
            fi
        done

        # If more than one folder were found and there is not a clear candidate, print the results.
        # The loop is used to print them in different lines.
        for i in "${search[@]}"; do echo $i; done
        return
    else
        # If only one folder was found, change to the found directory
        # cd $WORK_FOLDER$(find $WORK_FOLDER -type d -name "*$1*$2*" -print -maxdepth 1 | awk -F/ '{print $NF}')

        ## TODO(nruault): REMOVE ME -----------------------
        FOLDER=$(find $WORK_FOLDER -type d -name "*$1*$2*" -print -maxdepth 1 | awk -F/ '{print $NF}')
        WORK_FOLDER=$(eval echo $(go env GOPATH)/src/$COMPANY_DIRECTORY)
        COM=$(find $WORK_FOLDER -type d -name "$FOLDER" -print -maxdepth 1 | awk -F/ '{print $NF}')
        if [ -z "$COM" ]; then
            cd $WORK_FOLDER$FOLDER
        fi
        cd $WORK_FOLDER$(find $WORK_FOLDER -type d -name "*$1*$2*" -print -maxdepth 1 | awk -F/ '{print $NF}')
        ## REMOVE ME -----------------------
    fi
}

source_integrations_usage="source_integrations [integrations...] -- Sources any integration given a list

3rd party integrations must be added to this script manually. So far we can handle the next
Options:
    .          Loads general integrations
    aws        Prints how to load Amazon Web Service integration
    flutter    Loads Flutter integration
    gcloud     Loads Google Cloud integration
    nvm        Loads NVM integration
    sql        Loads MySQL integration
"

function source_integrations() {
    if [[ $# -eq 0 ]]; then
        echo "$source_integrations_usage"
        exit 1
    fi

    timelogger source_integrations start

    while [ $# -gt 0 ]; do
        case "$1" in
        .)
            echo "Loading general integrations"
            source "$ZSH_CUSTOM_CONFIG_ALIASES/integrations/general"
            ;;

        gcloud)
            echo "Loading GCloud integration"
            GCLOUD_SDK_PATH="/usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk"

            # The next line updates PATH for the Google Cloud SDK.
            if [ -f "$GCLOUD_SDK_PATH/path.zsh.inc" ]; then . "$GCLOUD_SDK_PATH/path.zsh.inc"; fi
            # The next line enables shell command completion for gcloud.
            if [ -f "$GCLOUD_SDK_PATH/completion.zsh.inc" ]; then . "$GCLOUD_SDK_PATH/completion.zsh.inc"; fi
            ;;

        node)
            # https://github.com/nvm-sh/nvm#uninstalling--removal
            # To remove nvm manually, execute the following:
            #   $ rm -rf "$NVM_DIR"
            echo "Loading NVM integration"
            export NVM_DIR="$HOME/.nvm"

            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # This loads nvm
            [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
            ;;

        aws)
            echo "Load AWS profiles by running 'export AWS_PROFILE=<development/production/personal>'"
            echo "All the profiles are sourced from '~/.aws/credentials'"
            ;;

        flutter)
            echo "Loading Flutter integration"
            [ -s "$HOME/flutter/bin/flutter" ] && export PATH="$PATH:$HOME/flutter/bin"
            ;;

        sql)
            echo "Loading MySQL integration"
            # brew install mysql mysql-client # It is important to include both, server and client
            if [ -f "/usr/local/opt/mysql-client/bin" ]; then export PATH="/usr/local/opt/mysql-client/bin:$PATH"; fi
            ;;

        *)
            echo "$0: error: unrecognized option $1"
            echo "$0: $source_integrations_usage"
            exit 0
            ;;

        esac
        shift

    done

    timelogger source_integrations end
}

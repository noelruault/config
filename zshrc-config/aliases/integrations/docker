#!/bin/bash

export DOCKER_SCRIPTS_PATH="integrations/docker_scripts"

alias dkclean="sh $ZSH_CUSTOM_CONFIG_ALIASES/$DOCKER_SCRIPTS_PATH/docker_clean_all.sh"
alias dkpurge="sh $ZSH_CUSTOM_CONFIG_ALIASES/$DOCKER_SCRIPTS_PATH/docker_purge.sh"
alias dklightclean="docker rmi $(docker images -f "dangling=true" -q) -f"
alias dkprune='docker system prune --volumes'
alias dkstatus="docker ps -q | xargs  docker stats --no-stream"
alias unsetkube='kubectl config unset current-context'
alias dkstop='docker stop $(docker ps -aq)'

# You can put this into ~/.docker/config.json to make it the default format.
alias dki='echo "\n___DOCKER IMAGES____ " && docker images -a && echo "\n___DOCKER COMPOSE IMAGES____ " && docker-compose images'
alias dkps='docker ps --format "table {{.ID}}\t{{.Image}}\t{{.Ports}}\t{{.Names}}"'

dklist() {
    echo '\n*** images ***' && docker images -a --format "table {{.ID}}\t{{.Tag}}\t{{.Size}}\t{{.Repository}}"
    if [[ -f "docker-compose.yml" || -f "docker-compose.yaml" ]]; then
        echo '\n*** compose-images ***' && docker-compose images
        echo '\n*** compose-containers ***' && docker-compose ps -a
    fi
    echo '\n*** volumes ***' && docker volume ls
    echo '\n*** containers ***' && docker ps --format "table {{.ID}}\t{{.Image}}\t{{.Ports}}\t{{.Names}}"
}

dkmanage_usage="dkmanage [-c] [-i] [-v] [-a] -- function to manage Docker resources within the system

Options:
    -c, --containers     Stops and removes all the containers
    -i, --images         Removes all the images
    -v, --volumes        Removes all the volumes
    -a, --all            Stops and removes containers, images and volumes
    -s, --soft           Removes all dangling images, stopped containers, networks not being used,
                         all images without at least one container associated to them and all build cache"

dkmanage() {
    if [[ $# -eq 0 ]]; then
       echo "$dkmanage_usage"; break;
    fi

    while [ $# -gt 0 ]
    do
        case "$1" in
        (-c|--containers)
            echo "Stopping containers..."
            sudo docker container stop $(docker container ls -aq)
            echo "Removing containers..."
            sudo docker rm $(sudo docker ps -aq) --force --volumes ;;

        (-i|--images)
            echo "Removing images..."
            sudo docker rmi $(sudo docker images -q) --force ;;

        (-v|--volumes)
            echo "Removing volumes..."
            docker volume rm $(docker volume ls) ;;

        (-s|--soft)
            docker rm $(docker ps -q -f status=exited)
            docker rmi $(docker images -f "dangling=true" -q) -f
            docker system prune -a ;;

        (-a|--all)
            echo "Deep cleaning docker: containers, images and volumes..."
            dkmanage -c -i -v ;;

        (-*) echo "$0: error: unrecognized option $1"; echo "$0: $dkmanage_usage"; exit 1 ;;
        (*)  echo "$0: $dkmanage_usage"; break ;;
        esac
        shift
    done
}

####
# DOCKER PERMISSION ISSUES?
# - docker-compose run --rm --service-ports -u root devenv-node-cp
# - docker run -u root devenv-node-cp

####
# DOCKER DOCS
#
# https://stackoverflow.com/a/20352563/4349318
# Start a simple SMTP server with Python like so:
# 	$ python -m smtpd -n -c DebuggingServer localhost:1025
# 		TIP: Enter to the container through bash
# 		(docker exec -it -u root <container_name> bash) and run the python command

# how-to-remove-docker-images-containers-and-volumes
# https://www.digitalocean.com/community/tutorials/how-to-remove-docker-images-containers-and-volumes

#!/bin/bash

# alias killport='netstat -vanp tcp | grep'
alias notebook='/anaconda3/bin/jupyter_mac.command ; exit;'

# dot_clean -> Remove dot-underscore files. Merges ._* files with corresponding native files. # https://ss64.com/osx/dot_clean.html
alias ds_clean="find . -name '.DS_Store' -type f -delete"

function whoamipro() {
    echo '*** $whoami ***' && whoami
    echo '*** $groups $(whoami) ***' && groups $(whoami) | cut -d' ' -f1
    echo '*** $id ***' && id
}

SPIDER="""
    _
 _\( )/_  Searching and killing
  /(O)\   service...
"""
NO_PARAM_ERROR="""
[INFO]: You need to run this function with at least one string parameter.
"""

function killprocess() {
    if [[ -z "$1" ]]; then
        echo $NO_PARAM_ERROR
        return
    else
        pids=$(ps aux | grep -v grep | grep --extended-regexp --ignore-case  "$@" | awk '{print $2}')
        #               ^ exclude self                                              ^ get second column value

        if [[ -z "$pids" ]]; then
            echo "Couldn't be found any PID related to the given application."
            return
        else
            echo $SPIDER
            echo "Related PIDS found:\n$pids"
            kill -9 $(ps aux | grep -Ei "$@" | awk '{print $2}')
            return
        fi
    fi
}
alias gobenchkill='killprocess "test.bench"'

function killport() {
    if [[ -z "$1" ]]; then
        echo $NO_PARAM_ERROR
        return
    else
        pids=$(netstat -vanp tcp | grep "$@" | awk '{print $9}')

        if [[ -z "$pids" ]]; then
            echo "Couldn't be found any PID related to the given port."
            return
        else
            echo $SPIDER
            echo "Related PIDS found:\n$pids"
            kill -9 $(netstat -vanp tcp | grep "$@" | awk '{print $9}')
            # lsof -i tcp:5000 | awk '{print $2}' | tail -n +2
            return
        fi
    fi
}

function findapp() {
    if [[ -z "$1" ]]; then
        echo $NO_PARAM_ERROR
        return
    else
        apps=$(ps axc | grep --ignore-case "$@")

        if [[ -z "$apps" ]]; then
            echo "Couldn't be found any PID related to the given app name."
            return
        else
            echo "Related apps found:\n$apps"
            return
        fi
    fi
}

# getUDID finds the UDID of a connected Apple device
function getUDID() {
    # xctrace list lists capabilities of the current running environment, such as devices or templates
    xcrun xctrace list devices

    # system_profiler reports system hardware and software configuration
    # system_profiler SPUSBDataType | sed -n -e '/iPad/,/Serial/p' -e '/iPhone/,/Serial/p' | grep "Serial Number:" | awk -F ": " '{print $2}'
}

function memusg() {
    echo "Which type of mem usage reporter do you want to use? < time / script >:"
    read memusg_source

    case $memusg_source in
    time)
        echo "alias for /usr/bin/time -l $@"
        /usr/bin/time -l $@
        echo "\n Maximum resident set size reports the peak RAM usage."
        ;;
    script)
        sh $ZSH_CUSTOM_CONFIG_ALIASES/utils/memusg.sh $@
        ;;
    esac
}

# $ZSH_CUSTOM/plugins/zsh-syntax-highlighting/highlighters/brackets/brackets-highlighter.zsh

### How to use Terminal to send keystrokes?
## osascript -e 'tell application "System Events" to keystroke "q" using {control down, command down}'

# NETWORK ALIASES

function myip() {
    echo ">> external / public ip"
    curl http://ipecho.net/plain
    echo

    echo ">> private ip (internal to my router)"
    ## MACOS
    ipconfig getifaddr en0 # ifconfig | grep "inet "

    echo ">> router (default gateway)"
    netstat -nr | grep -E "default.*en0" --color=never
}

# wifibounce restarts Wi-Fi network interface
alias wifibounce='sudo networksetup -setv4off Wi-Fi;sudo  networksetup -setdhcp Wi-Fi'
# currentnet prints the active network interface
alias currentnet="route get default | grep interface | awk '{print $2}'"

# netbounce will get the interface that is set to reach hosts from this machine and reset it
netbounce(){
    local net=$(route get default | grep interface | awk '{print $2}')
    sudo ifconfig $net down
    sudo ifconfig $net up
}

alias flushdns="sudo killall -HUP mDNSResponder"

# enbounce needs a parameter argument to reset an interface
# You can list interfaces by typing: << networksetup -listnetworkserviceorder >>
# Other handful network commands are: << ifconfig ; scutil --dns ; networksetup -listnetworkserviceorder >>
enbounce(){
    if [ -z "$1" ]; then
        echo "You should provide a network interface."
    else
        sudo ifconfig $1 down
        sudo ifconfig $1 up
    fi
}

# map exa commands to normal ls commands
alias ill="exa -l -g --icons"
alias ils="exa --icons"
alias ilt="exa --tree --icons -a -I '.git|__pycache__|.mypy_cache|.ipynb_checkpoints'"

# show file previews for fzf using bat
alias fp="fzf --preview 'bat --style=numbers --color=always --line-range :500 {}'"

# If gcc is installed, override MacOS gcc (clang/LLVM compiler)
GCCs=($(ls /usr/local/bin/gcc-*))
if (( ${#GCCs[@]} != 0 )); then
    alias gcc="$(basename $GCCs[1])"
fi

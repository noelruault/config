#!/bin/bash

# ------------------------------
# GENERAL ALIASES AND FUNCTIONS
# ------------------------------

# Launch Jupyter notebook
alias notebook='/anaconda3/bin/jupyter_mac.command ; exit;'

# Remove .DS_Store files
alias ds_clean="find . -name '.DS_Store' -type f -delete"

# Display user, groups, and ID info
function whoamipro() {
    echo '*** $whoami ***' && whoami
    echo '*** $groups $(whoami) ***' && groups $(whoami) | cut -d' ' -f1
    echo '*** $id ***' && id
}

# ------------------------------
# PROCESS AND SERVICE MANAGEMENT
# ------------------------------

SPIDER="""
    _
 _\( )/_  Searching and killing
  /(O)\   service...
"""
NO_PARAM_ERROR="""
[INFO]: You need to run this function with at least one string parameter.
"""

# Kill processes by name
function killprocess() {
    if [[ -z "$1" ]]; then
        echo "$NO_PARAM_ERROR"
        return
    else
        pids=$(ps aux | grep -v grep | grep -Ei "$@" | awk '{print $2}')
        if [[ -z "$pids" ]]; then
            echo "Couldn't find any PID related to the given application."
        else
            echo "$SPIDER"
            echo "Related PIDs found:\n$pids"
            kill -9 $pids
        fi
    fi
}

# Alias for killing a specific process
alias gobenchkill='killprocess "test.bench"'

# Kill processes by port number
function killport() {
    if [[ -z "$1" ]]; then
        echo "$NO_PARAM_ERROR"
        return
    else
        pids=$(netstat -vanp tcp | grep "$1" | awk '{print $9}')
        if [[ -z "$pids" ]]; then
            echo "Couldn't find any PID related to the given port."
        else
            echo "$SPIDER"
            echo "Related PIDs found:\n$pids"
            kill -9 $pids
        fi
    fi
}

# Find running apps by name
function findapp() {
    if [[ -z "$1" ]]; then
        echo "$NO_PARAM_ERROR"
        return
    else
        apps=$(ps axc | grep -i "$@")
        if [[ -z "$apps" ]]; then
            echo "Couldn't find any app related to the given name."
        else
            echo "Related apps found:\n$apps"
        fi
    fi
}

# ------------------------------
# SYSTEM INFORMATION AND MEMORY
# ------------------------------

# Get the UDID of a connected Apple device
function getUDID() {
    xcrun xctrace list devices
}

# Report memory usage
function memusg() {
    echo "Which type of memory usage reporter do you want to use? < time / script >:"
    read memusg_source

    case $memusg_source in
    time)
        /usr/bin/time -l "$@"
        echo "\n Maximum resident set size reports the peak RAM usage."
        ;;
    script)
        sh $ZSH_CUSTOM_CONFIG_ALIASES/utils/memusg.sh "$@"
        ;;
    esac
}

# ------------------------------
# NETWORK MANAGEMENT
# ------------------------------

# Show public and private IP addresses and default gateway
function myip() {
    CURRENT_INTERFACE=$(route get default | awk '/interface/ {print $2}')

    echo ">> External (public) IP:"
    curl http://ipecho.net/plain
    echo

    echo ">> Private IP (internal to router):"
    ipconfig getifaddr "$CURRENT_INTERFACE"

    echo ">> Router (default gateway):"
    netstat -nr | grep -E "default.*$CURRENT_INTERFACE" --color=never
}

# Restart Wi-Fi network interface
alias wifibounce='sudo networksetup -setv4off Wi-Fi;sudo networksetup -setdhcp Wi-Fi'

# Show active network interface
alias interface\?="route get default | grep 'interface'"

# Restart the default network interface
function netbounce() {
    local net=$(route get default | grep interface | awk '{print $2}')
    sudo ifconfig "$net" down
    sudo ifconfig "$net" up
}

# Flush DNS cache
alias flushdns="sudo killall -HUP mDNSResponder"

# Restart a specific network interface
function enbounce() {
    if [[ -z "$1" ]]; then
        echo "You should provide a network interface."
    else
        sudo ifconfig "$1" down
        sudo ifconfig "$1" up
    fi
}

# ------------------------------
# COMMAND LINE ENHANCEMENTS
# ------------------------------

# Show file previews for fzf using bat
alias fp="fzf --preview 'bat --style=numbers --color=always --line-range :500 {}'"

# ------------------------------
# COMPILER ALIAS
# ------------------------------

# If GNU GCC is installed in /usr/local/bin, override the default macOS gcc (which is clang/LLVM).
# Check for installed GCC versions (matching /usr/local/bin/gcc-*) and set an alias for 'gcc' to point to the first available version.
# GCCs=($(ls /usr/local/bin/gcc-* 2>/dev/null)) # suppress errors if no match is found
# if (( ${#GCCs[@]} != 0 )); then
#     alias gcc="$(basename ${GCCs[0]})"
# fi
